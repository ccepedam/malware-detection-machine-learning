--This Code create the datasets in .th7 format (.csv to .th7) to be processed by Lua/Thorch

require 'svm'
require 'nn'
require 'optim'
require 'torch'
require 'itorch'
require 'image'
require 'gnuplot'
require 'csvigo'


time = os.date("*t")
print(time.hour .. ":" .. time.min .. ":" .. time.sec)

trainSize = 14902
features = 1000

-- cutorch.setDevice(2)
local batch_size = 2

local path = '/path/'
trainDataFile= path .. 'Matrix.csv'
trainLabelFile= path .. 'Class.csv'

function file_exists(file)
   local  tf = io.open(file,"r")
   if tf ~= nil then
	  io.close(tf)
	  return true
   else
	  print(string.format("File %s doesn't exist",file))
	  os.exit()
   end
end

file_exists(trainDataFile)
file_exists(trainLabelFile)

torch.manualSeed(1)
torch.setdefaulttensortype('torch.DoubleTensor')
-- train data load and reduction

trainDataset ={}

-----------------------------

function ReadFileCreateTensor(file, path, features, name)
  
  function string:split(sep)
    local sep, fields = sep, {}
    local pattern = string.format("([^%s]+)", sep)
    self:gsub(pattern, function(substr) fields[#fields + 1] = substr end)
    return fields
  end


  local filePath = file
  -- Count number of rows and columns in file
  local i = 0
  for line in io.lines(filePath) do
    if i == 0 then
      COLS = #line:split(',')
    end
    i = i + 1
  end
  local ROWS = i
  -- Read data from CSV to tensor
  local csvFile = io.open(filePath, 'r')
  local data = torch.Tensor(ROWS, COLS)
  local i = 0
  for line in csvFile:lines('*l') do
    i = i + 1
    print(' line: ' .. i)
    local l = line:split(',')
    for key, val in ipairs(l) do
      data[i][key] = val
    end
  end
  csvFile:close()
  -- Serialize tensor
  local outputFilePath = path .. features .. name .. '.th7'
  torch.save(outputFilePath, data)
  return data
end
------------------------------
trainDataFileTENSOR= ReadFileCreateTensor(trainDataFile, path, features, 'Matrix')
trainLabelFileTENSOR= ReadFileCreateTensor(trainLabelFile, path, features, 'MatrixLabel')
