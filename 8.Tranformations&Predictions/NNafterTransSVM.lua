--This Code runs a Neural Network model for the matrix transformed by applying SVM to each feature vector

require 'nn'
require 'optim'
require 'torch'
require 'itorch'
require 'image'
require 'gnuplot'
require 'csvigo'


trainSize = 8942
testSize = 2980
validationSize = 2980
features = 31
local path = '/path/'


torch.manualSeed(1)
torch.setdefaulttensortype('torch.DoubleTensor')


trainDataset ={}
testDataset={}
validationDataset={}

-----------------------------

trainDataFileTENSOR= torch.load(path .. features .. 'TrainSVM.th7')
trainLabelFileTENSOR=torch.load(path .. features .. 'trainlabel.th7')
testDataFileTENSOR= torch.load(path .. features .. 'TestSVM.th7')
testLabelFileTENSOR= torch.load(path .. features .. 'testlabel.th7')


function createDataset(datafile, labelfile) 
  
  local trainTensor = datafile
  
  local labelTensor = labelfile
  
  local dataset = {
	  ["data"] = trainTensor,
	  ["labels"] = labelTensor
  }
    
  setmetatable(dataset,
				{
				   __index=function(t,i)
					  return {torch.Tensor(t.data[i]), torch.Tensor({t.labels[i][1]})}
				end }
  )
  function dataset:size()
	  return self.data:size(1)
  end
  return dataset
end


trainDataset = createDataset(trainDataFileTENSOR, trainLabelFileTENSOR)
trainDataset.data = trainDataset.data:double() 

testDataset = createDataset(testDataFileTENSOR, testLabelFileTENSOR)
testDataset.dat = testDataset.data:double()   

--------------+++++++++++++++++++++++++++++++++++++++++++

mlp = torch.load(path .. 'trainingNNModel.net')

criterion = nn.ClassNLLCriterion()
trainer = nn.StochasticGradient(mlp,criterion)
trainer.learningRate = 0.05
trainer.maxIteration=5

time = os.date("*t")
print(time.hour .. ":" .. time.min .. ":" .. time.sec)

trainer:train(trainDataset)

time = os.date("*t")
print(time.hour .. ":" .. time.min .. ":" .. time.sec)

--local modelToSave = path .. features .. 'trainingNN_SVMFinAll30_V2.net'
--torch.save(modelToSave, mlp)

----------++++++++++++++++++++++++++++++++++++++++++++++

--mlp = torch.load(path .. features .. 'trainingNN_SVMFinAll30.net')

predictedOut = torch.Tensor(testDataset:size(),2)

for i=1,testDataset:size() do
   predictedOut[i] = mlp:forward(testDataset[i][1])
   print('i ' .. i)
end

print(predictedOut)

time = os.date("*t")
print(time.hour .. ":" .. time.min .. ":" .. time.sec)
