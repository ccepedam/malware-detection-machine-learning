--This Code Create the Testing and training tensors for runing SVM 

require 'svm'
require 'nn'
require 'optim'
require 'torch'
require 'itorch'
require 'image'
require 'gnuplot'
require 'csvigo'


trainSize = 8942
testSize = 2980
validationSize = 2980
features = 31


local path = '/home/gpulab/Documents/CARLOSCM/WorkingOnTorch/DATA_for_Torch/'


trainDataFileTENSOR= torch.load(path .. features .. 'train.th7')
trainLabelFileTENSOR=torch.load(path .. features .. 'trainlabel.th7')
testDataFileTENSOR= torch.load(path .. features .. 'test.th7')
testLabelFileTENSOR= torch.load(path .. features .. 'testlabel.th7')


function parsingLines(labelT, trainT)
  local label = tonumber(labelT[1])
  if label == 2 then label = -1 end
  label = tonumber(label)
  local vals = {}
  local inds = {}
	local indcntr = 0
  for j=1,trainT:size(1) do --for j=1,trainT:size(1) do
    indcntr = indcntr + 1
		ind = tonumber(indcntr)
    val = tonumber(trainT[j])
    table.insert(inds,ind)
		table.insert(vals,val)
  end
  return label,{torch.IntTensor(inds),torch.FloatTensor(vals)}
end  


function createSVMDataset(datafile, labelfile) 
  
  local trainTensor = datafile
  local labelTensor = labelfile
  local data = {}
	local maxdim = 0
	local npos = 0
	local nneg = 0
  
  
	for i=1,trainTensor:size(1) do
    local lbl,vals = parsingLines(labelTensor[i], trainTensor[i])
		table.insert(data,{lbl,vals})
		maxdim = math.max(maxdim,vals[1][-1])
    --print(maxdim)
		if lbl == 1 then npos = npos + 1 else nneg = nneg + 1 end
	end
	print(string.format("# of positive samples = %d\n",npos))
	print(string.format("# of negative samples = %d\n",nneg))
	print(string.format("# of total    samples = %d\n",#data))
	return data,maxdim
end


trainDataset = createSVMDataset(trainDataFileTENSOR, trainLabelFileTENSOR)
testDataset = createSVMDataset(testDataFileTENSOR, testLabelFileTENSOR)


model = libsvm.train(trainDataset, '-g 1000000000000000 -c 1000 -h 0 -e 0.000001')

labels,accuracy,dec,output = libsvm.predict(trainDataset,model)
PredTraining1 = dec

labels,accuracy,dec,output = libsvm.predict(testDataset,model)
PredTest1 = dec
